<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAoHBwkHBgoJCAkLCwoMDxkQDw4ODx4WFxIZJCAmJSMgIyIo
        LTkwKCo2KyIjMkQyNjs9QEBAJjBGS0U+Sjk/QD3/2wBDAQsLCw8NDx0QEB09KSMpPT09PT09PT09PT09
        PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT3/wAARCACZAMwDASIAAhEBAxEB/8QA
        HwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIh
        MUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVW
        V1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXG
        x8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQF
        BgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAV
        YnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
        hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq
        8vP09fb3+Pn6/9oADAMBAAIRAxEAPwDzmijFGK+nPKCijFGKACgUYpaAFoopQKBCilpBSgUxMXFOFIBT
        gKCWFOFJTgKCRe1LigClpkgKXFAFOAoJYClFAFOpoQn40fjS0UxCfjR+NLRQAn40o+tFKKAMrFFPxRis
        zruMop+KMUBcZSgU7FLigLjcUopQKcFoFcbinYpdtOxTJbG4p1OC04LQTcYBT8U4LTgtArjAKdinBacF
        oJbGAU4A08JTglBJGBS7akC0u2gRGBRipQlGz2p3FcixRipdntRs9qdwuRYpQKk2e1KFouFzK2+1Jt9q
        lK0m2pOjmI9vtRt9qk20baA5iPb7Uu2n7aULQLmGhaUCnhaULQFxm2nBakC04LSFcjCc08JUgSnhKBXI
        9tOCVIEp4Si5NyIJThHUoSn7KBEISnBKnCU4R0XJuVxHTglWBH7U4R0XArbKNlWvKo8qlcRV2UuyrPlU
        eVRcCrspwjqx5VKIqdwMEqc0bTUuKMUzS5FtNG01LijFAXItppQtPxTgKAuRhaeF9qeFpwWgLjQvFOVK
        kC08LSC5GEp4SpFWpAlIREEqQR1KEqRUqbgQiP2qQR1KEzUgTtSuIgEXtTxFVhUp4j9qVwsVvKpwiq0I
        /anCP2pcwWKvlUnlVdEftR5ftRzBYpeVS+VVzy/ajy/ajmCxS8qnCLirfl+1OWLjpRzCscfgUYpx4orc
        dxuKMU6igLjcUoFLSigBQKeBSCnrSAUDmpAKaKkWkA5VqRVpq1ItS2McBUiikXtUq1ICqtSKtItSKKka
        QoWpAtItSAVNx2ALTgtKKeBSGNC0balAopXFYi20baloouOxFtpyrxT6cKLiOEP0o/Cm5pMiuwiw/wDC
        j8KZkUZFAWH0oqPIpwNAEgNPFRA08NSAmBqRTUANSBqQE4qRTUCtUitUtDJ1NSqarq9SK9TYCwpqQGq6
        vUgelYdywpqQGq4cU8PU2C5YU08Gq4cU8PSsO5OGpd1QhxRuHtRYLom3Ubqh3D2o3D2osF0S7qcrcVBu
        HtTg/wBKLCujhifrSZ+tN3Uma6xD8/WjP1pmaM0APz9aUGo80oagCUNTw1Q7qcDSAnDU8NUCtTg3vSsI
        shqerVXDe9OVqLBcsh6kD1VV6kDUrE3LQenrJmqganq1KwuYth6eJKqB6eHpcouYtiSnCSqgkpwelyhz
        FrzKPMquHo30coucseZS+ZVbfRvo5Q5yx5lOElVd9KH96OUOc5WkpN1Ju962Oiw6lpm73o3e9AWHUtM3
        e9ODUBYeKcDUeaUNQKxKKcpqMNTg1ArEoNPFRBqcGpE2JRTwaiDU4NQQ0TCnioQ1PDUCZMKcDUIanBqR
        JMD704God9OD0EkoPvRn3qMPS7/pQA/PvS596j3/AEo3/SgB+fenA+9Q7/pTg9AHMbqN1RZozTPRsS7q
        N1RZoz70BYl3Uoaoc0ZxQFicNSh6gDU4NQLlJw1ODVXDU4NQS4lkPSh6rh6cHoJsWQ9OD1WDmnB6CXEt
        B6cHqrvpwegnlLQenB6qh6USUC5S2JKUSe9VQ9L5lBPKWvM96PMqtv8ArR5n1oFylnzPejzPeq3mfWjz
        PrRYOUs+Z70ok96qeZ9acJKA5TB3Ubvah/vH60lB6Iu72o3e1JRRYBd1LuptFFgH5pc00Uo6UWEOBpQa
        aKWglj91KGptLRYlj91ODUz0py0yRwanBqbRQJj91OD0wUtBLHh6XfTaKaQh++jfSUU7CsLvo30lFFgs
        LvpQ/vTKni+6frSeg0j/2Q==
</value>
  </data>
</root>